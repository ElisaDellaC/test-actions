on:
  issue_comment:
    types: [created]
name: rebase
jobs:
  rebase:
    name: Rebase
    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/rebase')
    runs-on: ubuntu-latest
    env:
      URL: ${{ github.event.issue.url }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RUN_ID: ${{ github.run_id}}
      GITHUB_REPOSITORY: ${{ github.repository }}
    steps:
      - name: Add reaction - rebase started
        uses: khan/pull-request-comment-trigger@master
        id: check
        with: 
          trigger: '/rebase'
          reaction: rocket
      - name: Checkout the latest code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Automatic Rebase
        uses: cirrus-actions/rebase@1.3
      - name: Comment PR on rebase success
        if: ${{ success() }}     
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const comment = `✅ &nbsp; Automated Rebase successful \n--> https://github.com/${{env.GITHUB_REPOSITORY}}/actions/runs/${{env.RUN_ID}} \n --> Remove the test-out-of-date label to trigger a new test run`
            await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })    
      - name: Add test-results-out-of-date on rebase success
        if: ${{ success() }}     
        run: |
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data '{"labels":["test-results-out-of-date"]}'
      - name: Comment PR on failure
        if: ${{ failure() }}     
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const comment = `❌ &nbsp; Automated Rebase failure \n--> https://github.com/${{env.GITHUB_REPOSITORY}}/actions/runs/${{env.RUN_ID}} \n --> PR has been labled as WIP`
            await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })
      - name: Add label on failre
        if: ${{ failure() }}     
        run: |
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data '{"labels":["WIP"]}'
     
